package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"strings"

	auth "github.com/jdvober/goGoogleAuth"
	ssVals "github.com/jdvober/goSheets/values"
)

// SpreadsheetIDRoster is the unique ID of the Google Sheet containing student information.
const SpreadsheetIDRoster string = "1HRfK4yZERLWd-OcDZ8pJRirdzdkHln3SUtIfyGZEjNk"

// Day1 is the first day of the week
const Day1 string = "2020-11-09"

// Day2 is the second day of the week
const Day2 string = "2020-11-10"

// Day3 is the third day of the week
const Day3 string = "2020-11-11"

// Day4 is the fourth day of the week
const Day4 string = "2020-11-12"

// Day5 is the fifth day of the week
const Day5 string = "2020-11-13"

func main() {
	src, err := ioutil.ReadFile("request.json")
	if err != nil {
		fmt.Println("Error reading file.")
		return
	}

	data := string(src)

	// Get all student IDs

	// Get Google Client
	client := auth.Authorize()

	// Get the student IDs from the Class Roster 2.0 Spreadsheet Sunguard
	studentIDs := ssVals.Get(client, SpreadsheetIDRoster, "Master!I2:I")

	// Get attendance data
	attendanceVals := ssVals.Get(client, "1fJjz9bmD3MAXnTHcmO5k63GpSqh6lkZY-8x2yFawXFE", "All Classes!E2:I")

	for d := 0; d < 5; d++ {

		dates := []string{Day1, Day2, Day3, Day4, Day5}
		yearLocation := strings.Index(data, "AttendanceDate") + 17
		for i := 0; i < 10; i++ {
			data[yearLocation+i] = []byte(dates[d] + ", ")[i]
		}

		fmt.Println(string(data[yearLocation : yearLocation+10]))

		for s, sID := range studentIDs {
			/* fmt.Printf("sID = %s\n", sID[0].(string)) */
			idLocation := strings.Index(data, sID[0].(string))
			/* fmt.Printf("idLocation: %v\n", idLocation) */
			if idLocation == -1 {
				/* fmt.Println("Student is not in this class or mod!") */
			}
			if idLocation >= 0 {
				/* fmt.Printf("idLocation = %d\n", idLocation) */
				/* fmt.Printf("s= %v  d=%v\n", s, d) */

				att := attendanceVals[s][d]
				/* fmt.Printf("att=%v\n", att) */

				absentLocation := strings.Index(data[idLocation:], "Absent") + idLocation
				presentLocation := strings.Index(data[idLocation:], "Present") + idLocation
				switch att {
				case "Absent":
					for i := 8; i < 14; i++ {
						data[absentLocation+i] = []byte("true, ")[i-8]
					}

					for i := 9; i < 15; i++ {
						data[presentLocation+i] = []byte("false,")[i-9]
					}

					/* fmt.Printf("%s\n\n", string(data[absentLocation:absentLocation+150])) */

				case "N/a":
					/* fmt.Println("Student is not in APEX.") */
				default:
					for i := 8; i < 14; i++ {
						data[absentLocation+i] = []byte("false,")[i-8]
					}
					/* fmt.Printf("%s\n\n", string(data[absentLocation:absentLocation+150])) */
				}
			}
		}
		fmt.Println("Saving File...")
		file, err := os.Create(dates[d] + ".txt")
		if err != nil {
			fmt.Println(err)
			return
		}

		l, err := file.WriteString(string(data))
		if err != nil {
			fmt.Println(err)
			file.Close()
			return
		}
		fmt.Println(l, "bytes written successfully\n")
		err = file.Close()
		if err != nil {
			fmt.Println(err)
			return
		}
	}
}
